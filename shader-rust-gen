#!/usr/bin/env python3

import os

dir_path = "out/shaders"

shaders = set()

# Iterate directory
for relative_file_path in os.listdir(dir_path):
    file_path = os.path.join(dir_path, relative_file_path)
    if file_path.endswith(".vert.spv"):
        shader_name = relative_file_path[:-len(".vert.spv")]
        shaders.add(shader_name)

print("/// Generated by shader-rust-gen")
print("")
print("use crate::ffi;")
print("")
print("pub struct Shaders {")
for shader in shaders:
    print(f"    {shader}: ffi::VkShaderModule,")
print("}")
print("")

print("fn compile(device: ffi::VkDevice, bytes: &[u8]) -> ffi::VkShaderModule {")
print("   unsafe { ffi::compile_shader(device, bytes.as_ptr(), bytes.len()) }")
print("}")
print("")

print("impl Shaders {")
print("    pub fn load(device: ffi::VkDevice) -> Self {")
print("        Self {")
for shader in shaders:
    print(f'            {shader}: compile(device, include_bytes!("../{dir_path}/{shader}.vert.spv"))')
print("        }")
print("    }")
print("}")
